{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Login/Login.tsx"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","size","variant","createField","placeholder","name","validators","component","text","style","marginTop","marginLeft","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummaryError","margin","connect","state","auth","isAuth","login","to","backgroundColor","fontWeight","lineHeight","letterSpacing","formData","email","password","rememberMe","captcha"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,uMCUrHC,EAA8C,SAAC,GAAwC,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SACvEC,EAAWH,GAAWC,EAC5B,OACC,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KACrE,6BACEC,GAEDC,GAAY,8BAAOF,KAKVM,EAAwC,SAACC,GAAW,IACzDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADiD,YAC3BS,EAD2B,mBAE/D,OAAO,kBAACV,EAAgBU,EAAO,8CAAcC,EAAWC,MAG5CC,EAAqC,SAACH,GAAW,IACtDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD8C,YACxBS,EADwB,mBAE5D,OAAO,kBAACV,EAAgBU,EAAO,kBAAC,IAAD,eAAWI,KAAM,QACpCC,QAAS,YAAgBJ,EAAWC,MAG1C,SAASI,EAAyCC,EAC1CC,EACAC,EACAC,GACwB,IAAxBV,EAAuB,uDAAf,GAAIW,EAAW,uDAAJ,GACjC,OAAO,oCACN,yBAAKC,MAAO,CAACC,UAAW,GAAIC,WAAY,KACvC,kBAAC,IAAD,eAAOP,YAAaA,EAAaC,KAAMA,EACnCO,SAAUN,EACVC,UAAWA,GACPV,IAJT,IAKKW,M,iCC1CP,oEAAO,IAAMK,EAA+B,SAACC,GACzC,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCVlC,wGA2CME,EAAiBC,YAAkD,CAACC,KAAM,SAAzDD,EA1BpB,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAc/B,EAAuB,EAAvBA,MAAOgC,EAAgB,EAAhBA,WACzB,OACC,oCACC,0BAAMC,SAAUF,GACdlB,YAAqC,QAAS,QAAS,CAACU,KAAWb,KACnEG,YAAqC,WAAY,WAAY,CAACU,KAAWb,IAAO,CAACwB,KAAM,aAGvFF,GAAc,yBAAKG,IAAKH,EAAYI,IAAK,YACzCJ,GAAcnB,YAAqC,qBAAsB,UAAW,CAACU,KAAWb,IAAO,IAGvGV,GAAS,yBAAKG,UAAWgB,IAAMkB,kBAC9BrC,GAGF,6BACC,kBAAC,IAAD,CAAQmB,MAAO,CAACmB,OAAQ,IAAM3B,KAAM,QAASC,QAAS,YACpDsB,KAAM,UADR,eAyDUK,uBALS,SAACC,GAAD,MAA6C,CACpER,WAAYQ,EAAMC,KAAKT,WACvBU,OAAQF,EAAMC,KAAKC,UAGoB,CAACC,WAA1BJ,EA7BmD,SAAChC,GAKlE,OAAIA,EAAMmC,OACF,kBAAC,IAAD,CAAUE,GAAI,aAGf,6BACN,wBAAIzB,MAAO,CAACE,WAAY,KAAxB,SACA,wBAAIF,MAAO,CAAC0B,gBAAiB,UAAWxB,WAAY,KAApD,mCACA,uBAAGF,MAAO,CACTE,WAAY,GACZwB,gBAAiB,UACjBC,WAAY,IACZC,WAAY,EACZC,cAAe,cALhB,qCAOA,uBAAG7B,MAAO,CAACE,WAAY,GAAIwB,gBAAiB,UAAWC,WAAY,IAAKC,WAAY,EAAGC,cAAe,cAAtG,wBAEA,kBAACpB,EAAD,CAAgBK,SApBA,SAACgB,GACjB1C,EAAMoC,MAAMM,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAmBzCrB,WAAYzB,EAAMyB","file":"static/js/6.a40c355a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__x4y-b\",\"error\":\"FormsControls_error__2VbGF\",\"formSummaryError\":\"FormsControls_formSummaryError__DfVoe\"};","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype FormControlPropsType = {\r\n\tmeta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n\tconst hasError = touched && error;\r\n\treturn (\r\n\t\t<div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n\t\t\t<div>\r\n\t\t\t\t{children}\r\n\t\t\t</div>\r\n\t\t\t{hasError && <span>{error}</span>}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n\tconst {input, meta, ...restProps} = props;\r\n\treturn <FormControl {...props}><TextField size={\"small\"}\r\n\t\t\t\t\t\t\t\t\t\t\t  variant={\"outlined\"} {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t name: FormKeysType,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t validators: Array<FieldValidatorType>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t component: React.FC<WrappedFieldProps>,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t props = {}, text = \"\") {\r\n\treturn <>\r\n\t\t<div style={{marginTop: 20, marginLeft: 16}}>\r\n\t\t\t<Field placeholder={placeholder} name={name}\r\n\t\t\t\t   validate={validators}\r\n\t\t\t\t   component={component}\r\n\t\t\t\t   {...props}\r\n\t\t\t/> {text}\r\n\t\t</div>\r\n\t</>\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype LoginFormOwnProps = {\r\n\tcaptchaUrl: string | null\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n\t= ({handleSubmit, error, captchaUrl}) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(\"Email\", 'email', [required], Input)}\r\n\t\t\t\t{createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n\t\t\t\t{/*{createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}*/}\r\n\r\n\t\t\t\t{captchaUrl && <img src={captchaUrl} alt={\"captcha\"}/>}\r\n\t\t\t\t{captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input, {})}\r\n\r\n\r\n\t\t\t\t{error && <div className={style.formSummaryError}>\r\n\t\t\t\t\t{error}\r\n                </div>\r\n\t\t\t\t}\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Button style={{margin: 16 }} size={\"small\"} variant={\"contained\"}\r\n\t\t\t\t\t\t\ttype={\"submit\"}>Login</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</>\r\n\r\n\t)\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\ntype MapStatePropsType = {\r\n\tcaptchaUrl: string | null\r\n\tisAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n\tlogin: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n\tcaptcha: string\r\n\trememberMe: boolean\r\n\tpassword: string\r\n\temail: string\r\n}\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n\tconst onSubmit = (formData: LoginFormValuesType) => {\r\n\t\tprops.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\r\n\t}\r\n\r\n\tif (props.isAuth) {\r\n\t\treturn <Redirect to={\"/profile\"}/>\r\n\t}\r\n\r\n\treturn <div>\r\n\t\t<h1 style={{marginLeft: 16}}>Login</h1>\r\n\t\t<h3 style={{backgroundColor: \"#C4DFE6\", marginLeft: 16}}>Email and password for the test</h3>\r\n\t\t<p style={{\r\n\t\t\tmarginLeft: 16,\r\n\t\t\tbackgroundColor: \"#C4DFE6\",\r\n\t\t\tfontWeight: 400,\r\n\t\t\tlineHeight: 1,\r\n\t\t\tletterSpacing: \"0.00938em\"\r\n\t\t}}>Email: artem_ermakov_1999@mail.ru</p>\r\n\t\t<p style={{marginLeft: 16, backgroundColor: \"#C4DFE6\", fontWeight: 400, lineHeight: 1, letterSpacing: \"0.00938em\"}}>Password:\r\n\t\t\tUzatit1999</p>\r\n\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n\t</div>\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n\tcaptchaUrl: state.auth.captchaUrl,\r\n\tisAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}