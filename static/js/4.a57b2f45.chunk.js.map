{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Textarea","props","hasError","meta","touched","error","className","styles","formControl","input","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","style","formSummaryError","type","contact","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactc","contactTitle","contactValue","Contact","ProfileInfo","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","likesCount","MyPosts","React","memo","postsElements","posts","reverse","p","id","createRef","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","maxLength10","Field","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.a57b2f45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__x4y-b\",\"error\":\"FormsControls_error__2VbGF\",\"formSummaryError\":\"FormsControls_formSummaryError__DfVoe\"};","import React from \"react\";\r\nimport styles from \"../FormsControls/FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.child}\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props} />\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...props.input} {...props} />\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: any, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__35bGy\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1ZueE\",\"contact\":\"ProfileInfo_contact__PcP-6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1OnL9\",\"posts\":\"MyPosts_posts__B_2z8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item___TXG_\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props: any) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype PropsType = {\r\n    profile: any\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<{ handleSubmit: any, profile: any, error: any }> & PropsType> = ({handleSubmit, profile, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <button>Save</button>\r\n        </div>\r\n        {\r\n            error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>Full Name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n        </div>\r\n        <div>\r\n            <b>My professionals\r\n                skills</b>: {createField(\"My professionals skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>: {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {profile.contact && Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<any, any>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {updateStatus} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/businessperson-computer-icons-avatar-clip-art-avatar.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\nconst ProfileInfo = (props: any) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"profile\"/><br/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={props.profile} isOwner={props.isOwner}/>}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData: React.FC<{ profile: any, isOwner: any, goToEditMode: any }> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full Name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professionals skills</b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {profile.contactc && Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact: React.FC<{ contactTitle: any, contactValue: any }> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    message: string,\r\n    likesCount: number,\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/736x/1f/40/8d/1f408d7c2ad61ec6a4c8c28bd851fe85--my-works-mice.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React, {RefObject} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {TypeMyPosts} from \"../../../redux/store\";\r\nimport {reduxForm, Field} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\ntype PropType = {\r\n    posts: Array<TypeMyPosts>\r\n    newPostText?: string\r\n    addPost: (values: string) => void\r\n    updateNewPostText?: (text: any) => void\r\n}\r\n\r\nconst MyPosts = React.memo((props: PropType) => {\r\n\r\n        let postsElements =\r\n            [...props.posts]\r\n                .reverse()\r\n                .map(p => <Post message={p.message}\r\n                                key={p.id}\r\n                                likesCount={p.likesCount}/>)\r\n\r\n        type newPostType = RefObject<any>;\r\n\r\n        let newPostElement: newPostType = React.createRef();\r\n\r\n        let onAddPost = (values: any) => {\r\n            props.addPost(values.newPostText);\r\n        }\r\n\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                <div className={s.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n);\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\"\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]} placeholder={\"Post message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n// type PropType = {\r\n    // posts: Array<TypeMyPosts>\r\n    // newPostText: string\r\n    // store: any\r\n// }\r\n\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch:any) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\ntype PropsType = {\r\n    profile: any\r\n    status: any\r\n    updateStatus: any\r\n}\r\n\r\n\r\nconst Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: any\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: any\r\n    isAuth: any\r\n    status: string\r\n    updateStatus: string\r\n    savePhoto: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: string) => void\r\n    authorizedUserId: (userId: string) => void\r\n}\r\n\r\ntype OwnPropsType = MapStateToPropsType & MapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: any) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose<any>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);"],"sourceRoot":""}