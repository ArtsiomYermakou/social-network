{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.tsx","components/Login/Login.tsx"],"names":["module","exports","Textarea","props","hasError","meta","touched","error","className","styles","formControl","input","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","type","captchaUrl","src","alt","style","formSummaryError","connect","state","auth","isAuth","login","to","formData","email","password","rememberMe","captcha"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCD3H,qJAgBaC,EAAW,SAACC,GACrB,IAAMC,EAAWD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAClD,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAON,EAAWK,IAAOF,MAAQ,KAClE,6BACI,8CAAcJ,EAAMQ,MAAWR,KAElCC,GAAY,0BAAMI,UAAWC,IAAOF,OAAQJ,EAAME,KAAKE,SAKvDK,EAAQ,SAACT,GAClB,IAAMC,EAAWD,EAAME,KAAKC,SAAWH,EAAME,KAAKE,MAClD,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAON,EAAWK,IAAOF,MAAQ,KAClE,6BACI,2CAAWJ,EAAMQ,MAAWR,KAE/BC,GAAY,0BAAMI,UAAWC,IAAOF,OAAQJ,EAAME,KAAKE,SAKvDM,EAAc,SAACC,EAA4BC,EAAcC,EAAiBC,GAA5D,IAA4Ed,EAA5E,uDAAoF,GAAIe,EAAxF,uDAA+F,GAA/F,OACvB,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPd,IALf,IAMQe,K,iCC/CZ,oEAAO,IAAME,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAIEC,EAAmB,SAACC,GAAD,OAAuB,SAACF,GACpD,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCPlC,+FAyCME,EAAiBC,YAA6C,CAACC,KAAM,SAApDD,EApBL,SAACvB,GACf,OACI,0BAAMyB,SAAUzB,EAAM0B,cACjBhB,YAAY,QAAS,QAAS,CAACO,KAAWR,IAAOT,GACjDU,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,CAACkB,KAAM,aAC9DjB,YAAY,KAAM,aAAc,GAAID,IAAO,CAACkB,KAAM,YAAa,eAE/D3B,EAAM4B,YAAc,yBAAKC,IAAK7B,EAAM4B,WAAaE,IAAK,YACtD9B,EAAM4B,YAAclB,YAAY,qBAAsB,UAAW,CAACO,KAAWR,IAAO,IAGjFT,EAAMI,MAAQ,yBAAKC,UAAW0B,IAAMC,kBAAmBhC,EAAMI,OAAe,GAEhF,6BACI,8CA6BD6B,uBAJS,SAACC,GAAD,MAAiB,CACrCN,WAAYM,EAAMC,KAAKP,WACvBQ,OAAQF,EAAMC,KAAKC,UAEiB,CAACC,WAA1BJ,EApBD,SAACjC,GAKX,OAAIA,EAAMoC,OACC,kBAAC,IAAD,CAAUE,GAAI,aAIrB,6BACI,uDACA,kBAAChB,EAAD,CAAgBG,SAXP,SAACc,GACdvC,EAAMqC,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAUrCf,WAAY5B,EAAM4B","file":"static/js/6.6797f990.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__x4y-b\",\"error\":\"FormsControls_error__2VbGF\",\"formSummaryError\":\"FormsControls_formSummaryError__DfVoe\"};","import React from \"react\";\r\nimport styles from \"../FormsControls/FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.child}\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props} />\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const hasError = props.meta.touched && props.meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                <input {...props.input} {...props} />\r\n            </div>\r\n            {hasError && <span className={styles.error}>{props.meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators: any, component: any, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)\r\n","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router\"\r\nimport style from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\n\r\ntype LoginPropsType = {\r\n    login: string\r\n    password: string\r\n    checkbox: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm = (props: InjectedFormProps<LoginPropsType, LoginFormOwnProps> & LoginFormOwnProps) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField(\"Email\", \"email\", [required], Input, props)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n            {props.captchaUrl && <img src={props.captchaUrl}  alt={\"captcha\"}/>}\r\n            {props.captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input, {} ) }\r\n\r\n            {\r\n                props.error ? <div className={style.formSummaryError}>{props.error}</div> : \"\"\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginPropsType, LoginFormOwnProps>({form: \"login\"})(LoginForm);\r\n\r\n\r\nconst Login = (props: any) => {\r\n    const onSubmit = (formData: any) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>login into your account</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state: any) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}